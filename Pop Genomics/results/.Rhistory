hello
3+7
4^3-5
airTemp<-c(34,35,42,48,39)
print(airTemp)
summary(airTemp)
batAbundance<-c(100,104,98,132,138,150)
summary(batAbundance)
plot(x=airTemp, y=batAbundance)
plot(x=airTemp, y=batAbundance)
airTemp<-c(32,34,35,37,39,40)
plot(x=airTemp, y=batAbundance)
plot(x=airTemp, y=batAbundance,type="o")
ANOVADiameter <- aov(GoldenrodRawData$Diameter ~ GoldenrodRawData$SpeciesID)
# the par() function customizes many features of your graphs
# make a copy of current graphical parameter values
opar <- par()
#file.choose()
GoldenrodRawData <- read.csv(file = "Goldenrod_RawData.csv")
SC <- subset(GoldenrodRawData, SpeciesID == "SC")
SR <- subset(GoldenrodRawData, SpeciesID == "SR")
# the par() function customizes many features of your graphs
# make a copy of current graphical parameter values
opar <- par()
#file.choose()
GoldenrodRawData <- read.csv(file = "Goldenrod_RawData.csv")
#file.choose()
GoldenrodRawData <- read.csv(file = "Goldenrod_RawData.csv")
#file.choose()
GoldenrodRawData <- read.csv(file = "Goldenrod_RawData.csv")
SC <- subset(GoldenrodRawData, SpeciesID == "SC")
SR <- subset(GoldenrodRawData, SpeciesID == "SR")
# the par() function customizes many features of your graphs
# make a copy of current graphical parameter values
opar <- par()
#file.choose()
GoldenrodRawData <- read.csv(file = "Goldenrod_RawData.csv")
SC <- subset(GoldenrodRawData, SpeciesID == "SC")
SR <- subset(GoldenrodRawData, SpeciesID == "SR")
SG <- subset(GoldenrodRawData, SpeciesID == "SG")
## Summary statistic values
summary(SC)
summary(SR)
library(readr)
Goldenrod_RawData <- read_csv("Downloads/Goldenrod_RawData.csv")
View(Goldenrod_RawData)
# the par() function customizes many features of your graphs
# make a copy of current graphical parameter values
opar <- par()
#file.choose()
GoldenrodRawData <- read.csv(file = "Goldenrod_RawData.csv")
SC <- subset(GoldenrodRawData, SpeciesID == "SC")
SR <- subset(GoldenrodRawData, SpeciesID == "SR")
#file.choose()
GoldenrodRawData <- read.csv(file = "Goldenrod_RawData.csv")
View(Goldenrod_RawData)
# the par() function customizes many features of your graphs
# make a copy of current graphical parameter values
opar <- par()
#file.choose()
GoldenrodRawData <- read.csv(file = "Goldenrod_RawData.csv")
SC <- subset(GoldenrodRawData, SpeciesID == "SC")
SR <- subset(GoldenrodRawData, SpeciesID == "SR")
SG <- subset(GoldenrodRawData, SpeciesID == "SG")
# the par() function customizes many features of your graphs
# make a copy of current graphical parameter values
opar <- par()
#file.choose()
GoldenrodRawData <- read.csv(file = "Goldenrod_RawData.csv")
SC <- subset(GoldenrodRawData, SpeciesID == "SC")
par(mfrow=c(3,1))
plot(SC$Diameter ~SC$Height)
#CoefSC <- cor(SC$Diameter, SC$Height)
#don't worry about lm now, it is to draw a line on the graph
regressionSC = lm(SC$Diameter ~SC$Height)
abline(regressionSC, col = "green")
legend("topleft", bty="n", legend= "r =LOOK AT CoefSC in console")
#SR
plot(SR$Diameter ~ SR$Height)
regressionSR = lm(SR$Diameter ~SR$Height)
# the par() function customizes many features of your graphs
# make a copy of current graphical parameter values
opar <- par()
#file.choose()
GoldenrodRawData <- read.csv(file = "Goldenrod_RawData.csv")
SC <- subset(GoldenrodRawData, SpeciesID == "SC")
SR <- subset(GoldenrodRawData, SpeciesID == "SR")
SG <- subset(GoldenrodRawData, SpeciesID == "SG")
## Summary statistic values
summary(SC)
# the par() function customizes many features of your graphs
# make a copy of current graphical parameter values
opar <- par()
#file.choose()
GoldenrodRawData <- read.csv(file = "Goldenrod_RawData.csv")
list.files()
COV <- as.matrix(read.table("allRS_poly.cov")) # read in the genetic covariance matrix
setwd("/Users/meganoconnor/Desktop/Ecological_Genomics_2023/Pop Genomics/results/")
list.files()
COV <- as.matrix(read.table("allRS_poly.cov")) # read in the genetic covariance matrix
PCA <- eigen(COV) # extract the principal components from the COV matrix
var <- round(PCA$values/sum(PCA$values),3)
var[1:3]
barplot(var,
xlab="Eigenvalues of the PCA",
ylab="Proportion of variance explained")
names <- read.table("allRS_bam.list")
names <- unlist(strsplit(basename(as.character(names[,1])), split = ".sorted.rmdup.bam"))
split = strsplit(names, "_")
pops <- data.frame(names[1:95], do.call(rbind, split[1:95]))
names(pops) = c("Ind", "Pop", "Row", "Col")
plot(PCA$vectors[,1:2],
col=as.factor(pops[,2]),
xlab="PC1",ylab="PC2",
main="Genetic PCA")
data=as.data.frame(PCA$vectors)
data=data[,c(1:3)]
data= cbind(data, pops)
cols=c("#377eB8","#EE9B00","#0A9396","#94D2BD","#FFCB69","#005f73","#E26D5C","#AE2012", "#6d597a", "#7EA16B","#d4e09b", "gray70")
ggscatter(data, x = "V1", y = "V2",
color = "Pop",
mean.point = TRUE,
star.plot = TRUE) +
theme_bw(base_size = 13, base_family = "Times") +
theme(panel.background = element_blank(),
legend.background = element_blank(),
panel.grid = element_blank(),
plot.background = element_blank(),
legend.text=element_text(size=rel(.7)),
axis.text = element_text(size=13),
legend.position = "bottom") +
labs(x = paste0("PC1: (",var[1]*100,"%)"), y = paste0("PC2: (",var[2]*100,"%)")) +
scale_color_manual(values=c(cols), name="Source population") +
guides(colour = guide_legend(nrow = 2))
q <- read.table("allRS_poly.admix.2.Q", sep=" ", header=F)
K=dim(q)[2] #Find the level of K modeled
## order according to population code
ord<-order(pops[,2])
# make the plot:
barplot(t(q)[,ord],
col=cols[1:K],
space=0,border=NA,
xlab="Populations",ylab="Admixture proportions",
main=paste0("Red spruce K=",K))
text(tapply(1:nrow(pops),pops[ord,2],mean),-0.05,unique(pops[ord,2]),xpd=T)
abline(v=cumsum(sapply(unique(pops[ord,2]),function(x){sum(pops[ord,2]==x)})),col=1,lwd=1.2)
library(RcppCNPy)
install.packages(RcppCNPy)
library("RcppCNPy")
install.packages("RcppCNPy")
library(RcppCNPy)
setwd("~/Documents/Github/Ecological_Genomics/Fall_2023/pcangsd/")
setwd("~/Documents/Github/Ecological_Genomics/Fall_2023/pcangsd/")
setwd("~/Documents/Ecological_Genomics/Fall_2023/pcangsd/")
setwd("/Desktop/Ecological_Genomics_2023/Pop Genomics/results/)
llist.files()
setwd("/Desktop/Ecological_Genomics_2023/Pop Genomics/results/)
setwd("/Desktop/Ecological_Genomics_2023/Pop Genomics/results/)
list.files()
setwd("/Desktop/Ecological_Genomics_2023/Pop Genomics/results/)
setwd("~/Desktop/Ecological_Genomics_2023/Pop Genomics/results/)
### read in selection statistics (these are chi^2 distributed)
s<-npyLoad("allRS_poly.selection.npy")
setwd("~/Desktop/Ecological_Genomics_2023/Pop Genomics/results/)
### read in selection statistics (these are chi^2 distributed)
s<-npyLoad("allRS_poly.selection.npy")
setwd("~/Desktop/Ecological_Genomics_2023/Pop Genomics/results/)
### read in selection statistics (these are chi^2 distributed)
s<-npyLoad("allRS_poly.selection.npy")
setwd("~/Desktop/Ecological_Genomics_2023/Pop Genomics/results/)
### read in selection statistics (these are chi^2 distributed)
s<-npyLoad("allRS_poly.selection.npy")
setwd("~/Desktop/Ecological_Genomics_2023/Pop Genomics/results/")
s<-npyLoad("allRS_poly.selection.npy")
# convert test statistic to p-value
pval <- as.data.frame(1-pchisq(s,1))
names(pval) = "p_PC1"
# convert test statistic to p-value
pval <- as.data.frame(1-pchisq(s,1))
names(pval) = "p_PC1"
## read positions
p <- read.table("allRS_poly_mafs.sites",sep="\t",header=T, stringsAsFactors=T)
dim(p)
p_filtered = p[which(p$kept_sites==1),]
dim(p_filtered)
## make manhattan plot
plot(-log10(pval$p_PC1),
col=p_filtered$chromo,
xlab="Position",
ylab="-log10(p-value)",
main="Selection outliers: pcANGSD e=1 (K2)")
# get the contig with the lowest p-value for selection
sel_contig <- p_filtered[which(pval==min(pval$p_PC1)),c("chromo","position")]
sel_contig
# get all the outliers with p-values below some cutoff
cutoff=1e-4   # equals a 1 in 5,000 probability
outlier_contigs <- p_filtered[which(pval<cutoff),c("chromo","position")]
outlier_contigs
# how many outlier loci < the cutoff?
dim(outlier_contigs)[1]
# how many unique contigs harbor outlier loci?
length(unique(outlier_contigs$chromo))
# get all the outliers with p-values below some cutoff
cutoff=1e-3   # equals a 1 in 5,000 probability
outlier_contigs <- p_filtered[which(pval<cutoff),c("chromo","position")]
outlier_contigs
# get all the outliers with p-values below some cutoff
cutoff=1e-4   # equals a 1 in 5,000 probability
outlier_contigs <- p_filtered[which(pval<cutoff),c("chromo","position")]
outlier_contigs
# how many outlier loci < the cutoff?
dim(outlier_contigs)[1]
# how many unique contigs harbor outlier loci?
length(unique(outlier_contigs$chromo))
View(sel_contig)
outlier_contigs <- outlier_contigs[which(outlier_contigs$position>0,]
# get the contig with the lowest p-value for selection
sel_contig <- p_filtered[which(pval==min(pval$p_PC1)),c("chromo","position")]
sel_contig
# get all the outliers with p-values below some cutoff
cutoff=1e-4   # equals a 1 in 5,000 probability
outlier_contigs <- p_filtered[which(pval<cutoff),c("chromo","position")]
outlier_contigs <- outlier_contigs[which(outlier_contigs$position>0,]
outlier_contigs <- outlier_contigs[which(outlier_contigs$position>0),]
# how many outlier loci < the cutoff?
dim(outlier_contigs)[1]
# how many unique contigs harbor outlier loci?
length(unique(outlier_contigs$chromo))
# get the contig with the lowest p-value for selection
sel_contig <- p_filtered[which(pval==min(pval$p_PC1)),c("chromo","position")]
sel_contig
# get all the outliers with p-values below some cutoff
cutoff=1e-4   # equals a 1 in 5,000 probability
outlier_contigs <- p_filtered[which(pval<cutoff),c("chromo","position")]
outlier_contigs <- outlier_contigs[which(outlier_contigs$position>0),]
dim(outlier_contig)
plot(-log10(pval$p_PC1[2e05:2.01e05]),
col=p_filtered$chromo,
xlab="Position",
ylab="-log10(p-value)",
main="Selection outliers: pcANGSD e=1 (K2)")
# get the contig with the lowest p-value for selection
sel_contig <- p_filtered[which(pval==min(pval$p_PC1)),c("chromo","position")]
sel_contig
# get all the outliers with p-values below some cutoff
cutoff=1e-4   # equals a 1 in 5,000 probability
outlier_contigs <- p_filtered[which(pval<cutoff),c("chromo","position")]
outlier_contigs <- outlier_contigs[which(outlier_contigs$position>0),]
dim(outlier_contig)
dim(outlier_contigs)
write.table(unique(outlier_contigs$chromo),
"allRS_poly_PC1_outlier_contigs.txt",
sep="\t",
quote=F,
row.names=F,
col.names=F)
setwd("~/Desktop/Ecological_Genomics_2023/Pop Genomics/results/")
s<-npyLoad("allRS_poly.selection.npy")
# convert test statistic to p-value
pval <- as.data.frame(1-pchisq(s,1))
names(pval) = "p_PC1"
# convert test statistic to p-value
pval <- as.data.frame(1-pchisq(s,1))
names(pval) = "p_PC1"
## read positions
p <- read.table("allRS_poly_mafs.sites",sep="\t",header=T, stringsAsFactors=T)
dim(p)
p_filtered = p[which(p$kept_sites==1),]
dim(p_filtered)
## make manhattan plot
plot(-log10(pval$p_PC1),
col=p_filtered$chromo,
xlab="Position",
ylab="-log10(p-value)",
main="Selection outliers: pcANGSD e=1 (K2)")
plot(-log10(pval$p_PC1[2e05:2.01e05]),
col=p_filtered$chromo,
xlab="Position",
ylab="-log10(p-value)",
main="Selection outliers: pcANGSD e=1 (K2)")
# get the contig with the lowest p-value for selection
sel_contig <- p_filtered[which(pval==min(pval$p_PC1)),c("chromo","position")]
sel_contig
# get all the outliers with p-values below some cutoff
cutoff=1e-4   # equals a 1 in 5,000 probability
outlier_contigs <- p_filtered[which(pval<cutoff),c("chromo","position")]
outlier_contigs <- outlier_contigs[which(outlier_contigs$position>0),]
dim(outlier_contigs)
write.table(unique(outlier_contigs$chromo),
"allRS_poly_PC1_outlier_contigs.txt",
sep="\t",
quote=F,
row.names=F,
col.names=F)
# how many outlier loci < the cutoff?
dim(outlier_contigs)[1]
# how many unique contigs harbor outlier loci?
length(unique(outlier_contigs$chromo))
install.packages("raster")
install.packages("FactoMineR")
install.packages("factoextra")
install.packages("corrplot")
setwd("~/Desktop/Ecological_Genomics_2023/Pop Genomics/results/")
library(RcppCNPy) # for reading python numpy (.npy) files
setwd("~/Desktop/Ecological_Genomics_2023/Pop Genomics/results/")
list.files()
s<-npyLoad("allRS_poly.selection.npy")
# convert test statistic to p-value
pval <- as.data.frame(1-pchisq(s,1))
names(pval) = c("p_PC1","p_PC2")
## read positions
p <- read.table("allRS_poly_mafs.sites",sep="\t",header=T, stringsAsFactors=T)
dim(p)
p_filtered = p[which(p$kept_sites==1),]
dim(p_filtered)
# get all the outliers with p-values below some cutoff
cutoff=1e-3
outliers_PC1 <- p_filtered[which(pval$p_PC1<cutoff),c("chromo","position")]
# how many outlier loci < the cutoff?
dim(outliers_PC1)[1]
# write them out to a file
write.table(outliers_PC1,
"allRS_poly_outliers_PC1.txt",
sep=":",
quote=F,
row.names=F,
col.names=F)
#  export the scores for each of our individuals along the genetic PC1 and PC2 axes. We’ll use these scores as covariates in our GEA model to control for the overall effects of population structure when testing for climate association.
COV <- as.matrix(read.table("allRS_poly.cov"))
PCA <- eigen(COV)
data=as.data.frame(PCA$vectors)
data=data[,c(1:2)] # the second number here is the number of PC axes you want to keep
head(data)
write.table(data,
"allRS_poly_genPC1_2.txt",
sep="\t",
quote=F,
row.names=F,
col.names=F)
library(raster)
library(FactoMineR)
library(factoextra)
library(corrplot)
library(raster)
# GETTING THE BIOCLIM ENV VARIABLES
# You made need to use "install.packages" if you don't have some of the below libraries already
install.packages("raster")
library(raster)
install.packages("raster")
install.packages("terra")
library(raster)
setwd("/Users/meganoconnor/Desktop/Ecological_Genomics_2023/Pop Genomics/results/")
list.files()
library(ggplot2) # plotting
library(ggpubr) #plotting
library(ggpubr)
install.packages("ggpubr")
library(ggpubr) #plotting
library(ggpubr) #plotting
