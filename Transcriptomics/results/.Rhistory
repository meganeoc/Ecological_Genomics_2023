hello
3+7
4^3-5
airTemp<-c(34,35,42,48,39)
print(airTemp)
summary(airTemp)
batAbundance<-c(100,104,98,132,138,150)
summary(batAbundance)
plot(x=airTemp, y=batAbundance)
plot(x=airTemp, y=batAbundance)
airTemp<-c(32,34,35,37,39,40)
plot(x=airTemp, y=batAbundance)
plot(x=airTemp, y=batAbundance,type="o")
ANOVADiameter <- aov(GoldenrodRawData$Diameter ~ GoldenrodRawData$SpeciesID)
# the par() function customizes many features of your graphs
# make a copy of current graphical parameter values
opar <- par()
#file.choose()
GoldenrodRawData <- read.csv(file = "Goldenrod_RawData.csv")
SC <- subset(GoldenrodRawData, SpeciesID == "SC")
SR <- subset(GoldenrodRawData, SpeciesID == "SR")
# the par() function customizes many features of your graphs
# make a copy of current graphical parameter values
opar <- par()
#file.choose()
GoldenrodRawData <- read.csv(file = "Goldenrod_RawData.csv")
#file.choose()
GoldenrodRawData <- read.csv(file = "Goldenrod_RawData.csv")
#file.choose()
GoldenrodRawData <- read.csv(file = "Goldenrod_RawData.csv")
SC <- subset(GoldenrodRawData, SpeciesID == "SC")
SR <- subset(GoldenrodRawData, SpeciesID == "SR")
# the par() function customizes many features of your graphs
# make a copy of current graphical parameter values
opar <- par()
#file.choose()
GoldenrodRawData <- read.csv(file = "Goldenrod_RawData.csv")
SC <- subset(GoldenrodRawData, SpeciesID == "SC")
SR <- subset(GoldenrodRawData, SpeciesID == "SR")
SG <- subset(GoldenrodRawData, SpeciesID == "SG")
## Summary statistic values
summary(SC)
summary(SR)
library(readr)
Goldenrod_RawData <- read_csv("Downloads/Goldenrod_RawData.csv")
View(Goldenrod_RawData)
# the par() function customizes many features of your graphs
# make a copy of current graphical parameter values
opar <- par()
#file.choose()
GoldenrodRawData <- read.csv(file = "Goldenrod_RawData.csv")
SC <- subset(GoldenrodRawData, SpeciesID == "SC")
SR <- subset(GoldenrodRawData, SpeciesID == "SR")
#file.choose()
GoldenrodRawData <- read.csv(file = "Goldenrod_RawData.csv")
View(Goldenrod_RawData)
# the par() function customizes many features of your graphs
# make a copy of current graphical parameter values
opar <- par()
#file.choose()
GoldenrodRawData <- read.csv(file = "Goldenrod_RawData.csv")
SC <- subset(GoldenrodRawData, SpeciesID == "SC")
SR <- subset(GoldenrodRawData, SpeciesID == "SR")
SG <- subset(GoldenrodRawData, SpeciesID == "SG")
# the par() function customizes many features of your graphs
# make a copy of current graphical parameter values
opar <- par()
#file.choose()
GoldenrodRawData <- read.csv(file = "Goldenrod_RawData.csv")
SC <- subset(GoldenrodRawData, SpeciesID == "SC")
par(mfrow=c(3,1))
plot(SC$Diameter ~SC$Height)
#CoefSC <- cor(SC$Diameter, SC$Height)
#don't worry about lm now, it is to draw a line on the graph
regressionSC = lm(SC$Diameter ~SC$Height)
abline(regressionSC, col = "green")
legend("topleft", bty="n", legend= "r =LOOK AT CoefSC in console")
#SR
plot(SR$Diameter ~ SR$Height)
regressionSR = lm(SR$Diameter ~SR$Height)
# the par() function customizes many features of your graphs
# make a copy of current graphical parameter values
opar <- par()
#file.choose()
GoldenrodRawData <- read.csv(file = "Goldenrod_RawData.csv")
SC <- subset(GoldenrodRawData, SpeciesID == "SC")
SR <- subset(GoldenrodRawData, SpeciesID == "SR")
SG <- subset(GoldenrodRawData, SpeciesID == "SG")
## Summary statistic values
summary(SC)
# the par() function customizes many features of your graphs
# make a copy of current graphical parameter values
opar <- par()
#file.choose()
GoldenrodRawData <- read.csv(file = "Goldenrod_RawData.csv")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("DESeq2")
Yes
library(DESeq2)
BiocManager::install("DESeq2")
library(DESeq2)
library(dplyr)
library(tidyr)
library(ggplot2)
library(scales)
library(ggpubr)
library(wesanderson)
library(vsn)  ### First: BiocManager::install("vsn") AND BiocManager::install("hexbin")
install.packages("wesanderson")
library(DESeq2)
install.packages("DESeq2")
library(DESeq2)
library(dplyr)
library(tidyr)
library(ggplot2)
library(scales)
library(ggpubr)
library(wesanderson)
library(vsn)  ### First: BiocManager::install("vsn") AND BiocManager::install("hexbin")
library(BiocManager)
library(DESeq2)
library(DESeq2)
## Set your working directory
setwd("~/github/hudsonica")
## Set your working directory
setwd("~/Ecological_Genomics_2023/Transcriptomics/results")
if (!require("BiocManager", quietly = TRUE))
## Set your working directory
setwd("~/Ecological_Genomics_2023/Transcriptomics/results")
if (!require("BiocManager", quietly = TRUE))
# Import the counts matrix
countsTable <- read.table("salmon.isoform.counts.matrix", header=TRUE, row.names=1)
head(countsTable)
dim(countsTable)
# Import the counts matrix
countsTable <- read.table("salmon.isoform.counts.matrix", header=TRUE, row.names=1)
## Set your working directory
setwd("~/Ecological_Genomics_2023/Transcriptomics/results")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("DESeq2")
# Import the counts matrix
countsTable <- read.table("salmon.isoform.counts.matrix", header=TRUE, row.names=1)
## Set your working directory
setwd("~/Ecological_Genomics_2023/Transcriptomics/results")
setwd("~/Desktop/Ecological_Genomics_2023/Transcriptomics/results")
# Import the counts matrix
countsTable <- read.table("salmon.isoform.counts.matrix", header=TRUE, row.names=1)
ahead(countsTable)
#import the sample discription table
conds <- read.delim("ahud_samples_R.txt", header=TRUE, stringsAsFactors = TRUE, row.names=1)
head(conds)
# Import the counts matrix
countsTable <- read.table("salmon.isoform.counts.matrix", header=TRUE, row.names=1)
ahead(countsTable)
# Import the counts matrix
countsTable <- read.table("salmon.isoform.counts.matrix", header=TRUE, row.names=1)
head(countsTable)
dim(countsTable)
countsTableRound <- round(countsTable) # bc DESeq2 doesn't like decimals (and Salmon outputs data with decimals)
head(countsTableRound)
#import the sample discription table
conds <- read.delim("ahud_samples_R.txt", header=TRUE, stringsAsFactors = TRUE, row.names=1)
head(conds)
# Let's see how many reads we have from each sample
colSums(countsTableRound)
mean(colSums(countsTableRound))
barplot(colSums(countsTableRound), names.arg=colnames(countsTableRound),cex.names=0.5, las=3,ylim=c(0,20000000))
abline(h=mean(colSums(countsTableRound)), col="blue", lwd=2)
abline(h=mean(colSums(countsTableRound)), col="blue", lwd=2)
barplot(colSums(countsTableRound), names.arg=colnames(countsTableRound),cex.names=0.5, las=3,ylim=c(0,210000000))
abline(h=mean(colSums(countsTableRound)), col="blue", lwd=2)
barplot(colSums(countsTableRound), names.arg=colnames(countsTableRound),cex.names=0.5, las=3,ylim=c(0,20000000))
abline(h=mean(colSums(countsTableRound)), col="blue", lwd=2)
abline(h=mean(colSums(countsTableRound)), col="blue", lwd=2)
barplot(colSums(countsTableRound), names.arg=colnames(countsTableRound),cex.names=0.5, las=3,ylim=c(0,21000000))
abline(h=mean(colSums(countsTableRound)), col="blue", lwd=2)
# the average number of counts per gene
rowSums(countsTableRound)
mean(rowSums(countsTableRound)) # [1] 11930.81 - tonsa, 6076.078 - hudsonica genes, 2269 - hudsonica isoform
median(rowSums(countsTableRound)) # [1] 2226 - tonsa, 582 - hudsonica, 109
apply(countsTableRound,2,mean) # 2 in the apply function does the action across columns
apply(countsTableRound,1,mean) # 1 in the apply function does the action across rows
hist(apply(countsTableRound,1,mean),xlim=c(0,1000), ylim=c(0,120000),breaks=10000)
apply(countsTableRound,2,mean) # 2 in the apply function does the action across columns
apply(countsTableRound,1,mean) # 1 in the apply function does the action across rows
hist(apply(countsTableRound,1,mean),xlim=c(0,1000), ylim=c(0,300000),breaks=10000)
dds <- DESeqDataSetFromMatrix(countData = countsTableRound, colData=conds,
design= ~ treatment + generation)
dds <- DESeqDataSetFromMatrix(countData = countsTableRound, colData=conds,
design= ~ treatment + generation)
dim(dds)
library(DESeq2)
install.packages("matrixStats")
