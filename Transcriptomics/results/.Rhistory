hello
3+7
4^3-5
airTemp<-c(34,35,42,48,39)
print(airTemp)
summary(airTemp)
batAbundance<-c(100,104,98,132,138,150)
summary(batAbundance)
plot(x=airTemp, y=batAbundance)
plot(x=airTemp, y=batAbundance)
airTemp<-c(32,34,35,37,39,40)
plot(x=airTemp, y=batAbundance)
plot(x=airTemp, y=batAbundance,type="o")
ANOVADiameter <- aov(GoldenrodRawData$Diameter ~ GoldenrodRawData$SpeciesID)
# the par() function customizes many features of your graphs
# make a copy of current graphical parameter values
opar <- par()
#file.choose()
GoldenrodRawData <- read.csv(file = "Goldenrod_RawData.csv")
SC <- subset(GoldenrodRawData, SpeciesID == "SC")
SR <- subset(GoldenrodRawData, SpeciesID == "SR")
# the par() function customizes many features of your graphs
# make a copy of current graphical parameter values
opar <- par()
#file.choose()
GoldenrodRawData <- read.csv(file = "Goldenrod_RawData.csv")
#file.choose()
GoldenrodRawData <- read.csv(file = "Goldenrod_RawData.csv")
#file.choose()
GoldenrodRawData <- read.csv(file = "Goldenrod_RawData.csv")
SC <- subset(GoldenrodRawData, SpeciesID == "SC")
SR <- subset(GoldenrodRawData, SpeciesID == "SR")
# the par() function customizes many features of your graphs
# make a copy of current graphical parameter values
opar <- par()
#file.choose()
GoldenrodRawData <- read.csv(file = "Goldenrod_RawData.csv")
SC <- subset(GoldenrodRawData, SpeciesID == "SC")
SR <- subset(GoldenrodRawData, SpeciesID == "SR")
SG <- subset(GoldenrodRawData, SpeciesID == "SG")
## Summary statistic values
summary(SC)
summary(SR)
library(readr)
Goldenrod_RawData <- read_csv("Downloads/Goldenrod_RawData.csv")
View(Goldenrod_RawData)
# the par() function customizes many features of your graphs
# make a copy of current graphical parameter values
opar <- par()
#file.choose()
GoldenrodRawData <- read.csv(file = "Goldenrod_RawData.csv")
SC <- subset(GoldenrodRawData, SpeciesID == "SC")
SR <- subset(GoldenrodRawData, SpeciesID == "SR")
#file.choose()
GoldenrodRawData <- read.csv(file = "Goldenrod_RawData.csv")
View(Goldenrod_RawData)
# the par() function customizes many features of your graphs
# make a copy of current graphical parameter values
opar <- par()
#file.choose()
GoldenrodRawData <- read.csv(file = "Goldenrod_RawData.csv")
SC <- subset(GoldenrodRawData, SpeciesID == "SC")
SR <- subset(GoldenrodRawData, SpeciesID == "SR")
SG <- subset(GoldenrodRawData, SpeciesID == "SG")
# the par() function customizes many features of your graphs
# make a copy of current graphical parameter values
opar <- par()
#file.choose()
GoldenrodRawData <- read.csv(file = "Goldenrod_RawData.csv")
SC <- subset(GoldenrodRawData, SpeciesID == "SC")
par(mfrow=c(3,1))
plot(SC$Diameter ~SC$Height)
#CoefSC <- cor(SC$Diameter, SC$Height)
#don't worry about lm now, it is to draw a line on the graph
regressionSC = lm(SC$Diameter ~SC$Height)
abline(regressionSC, col = "green")
legend("topleft", bty="n", legend= "r =LOOK AT CoefSC in console")
#SR
plot(SR$Diameter ~ SR$Height)
regressionSR = lm(SR$Diameter ~SR$Height)
# the par() function customizes many features of your graphs
# make a copy of current graphical parameter values
opar <- par()
#file.choose()
GoldenrodRawData <- read.csv(file = "Goldenrod_RawData.csv")
SC <- subset(GoldenrodRawData, SpeciesID == "SC")
SR <- subset(GoldenrodRawData, SpeciesID == "SR")
SG <- subset(GoldenrodRawData, SpeciesID == "SG")
## Summary statistic values
summary(SC)
# the par() function customizes many features of your graphs
# make a copy of current graphical parameter values
opar <- par()
#file.choose()
GoldenrodRawData <- read.csv(file = "Goldenrod_RawData.csv")
setwd("~/Desktop/Ecological_Genomics_2023/Transcriptomics/results")
# Load the package
library(WGCNA);
install.packages("WGCNA")
library(WGCNA)
install.packages("preprocessCore")
# Load the package
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
library(WGCNA);
# Load the package
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("preprocessCore")
setwd("~/Desktop/Ecological_Genomics_2023/Transcriptomics/results")
saveRDS(bwnet, file = "bwnet.rds")
# To load the object
bwnet <- readRDS("bwnet.rds")
# Load the package
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("preprocessCore")
# The following setting is important, do not omit.
options(stringsAsFactors = FALSE);
library(DESeq2)
library(ggplot2)
library(tidyverse)
install.packages("remotes")
install.packages("remotes")
remotes::install_github("kevinblighe/CorLevelPlot")
library(CorLevelPlot)
library(gridExtra)
library(Rmisc)
colData <- row.names(sample_metadata)
# making the rownames and column names identical
all(rownames(colData) %in% colnames(countsTableRound)) # to see if all samples are present in both
countsTable <- read.table("salmon.isoform.counts.matrix.filteredAssembly", header=TRUE, row.names=1)
head(countsTable)
dim(countsTable)
countsTableRound <- round(countsTable) # bc DESeq2 doesn't like decimals (and Salmon outputs data with decimals)
head(countsTableRound)
sample_metadata = read.table(file = "Ahud_trait_data.txt",header=T, row.names = 1)
dds <- DESeqDataSetFromMatrix(countData = countsTableRound, colData=sample_metadata,
design= ~ 1)
dim(dds)
dds <- dds[rowSums(counts(dds) >= 15) >= 28,]
nrow(dds)
# Run the DESeq model to test for differential gene expression
dds <- DESeq(dds)
gsg <- goodSamplesGenes(t(countsTable))
# Call the network topology analysis function; this step takes a couple minutes
sft <- pickSoftThreshold(norm.counts,
powerVector = power,
networkType = "signed",
verbose = 5)
sft.data <- sft$fitIndices
a1 <- ggplot(sft.data, aes(Power, SFT.R.sq, label = Power)) +
geom_point() +
geom_text(nudge_y = 0.1) +
geom_hline(yintercept = 0.8, color = 'red') +
labs(x = 'Power', y = 'Scale free topology model fit, signed R^2') +
theme_classic()
a2 <- ggplot(sft.data, aes(Power, mean.k., label = Power)) +
geom_point() +
geom_text(nudge_y = 0.1) +
labs(x = 'Power', y = 'Mean Connectivity') +
theme_classic()
grid.arrange(a1, a2, nrow = 2)
# convert matrix to numeric
norm.counts[] <- sapply(norm.counts, as.numeric)
soft_power <- 6
temp_cor <- cor
cor <- WGCNA::cor # use the 'cor' function from the WGCNA package
# this step also takes a few minutes; ideally your maxBlockSize is larger than your number of genes to run the memory-intensive network construction all at once.
bwnet <- blockwiseModules(norm.counts,
maxBlockSize = 26000,
minModuleSize = 30,
reassignThreshold=0,
TOMType = "signed",
power = soft_power,
mergeCutHeight = 0.25,
numericLabels = F,
randomSeed = 1234,
verbose = 3)
cor <- temp_cor
saveRDS(bwnet, file = "bwnet.rds")
# To load the object
bwnet <- readRDS("bwnet.rds")
# 5. Module Eigengenes ---------------------------------------------------------
module_eigengenes <- bwnet$MEs
head(module_eigengenes)
# get number of genes for each module
table(bwnet$colors)
# Plot the dendrogram and the module colors before and after merging underneath
plotDendroAndColors(bwnet$dendrograms[[1]], cbind(bwnet$unmergedColors, bwnet$colors),
c("unmerged", "merged"),
dendroLabels = FALSE,
addGuide = TRUE,
hang= 0.03,
guideHang = 0.05)
library(WGCNA)
# Plot the dendrogram and the module colors before and after merging underneath
plotDendroAndColors(bwnet$dendrograms[[1]], cbind(bwnet$unmergedColors, bwnet$colors),
c("unmerged", "merged"),
dendroLabels = FALSE,
addGuide = TRUE,
hang= 0.03,
guideHang = 0.05)
traits <- sample_metadata[, c(5,8,11,14,17)]
# Define numbers of genes and samples
nSamples <- nrow(norm.counts)
nGenes <- ncol(norm.counts)
# get number of genes for each module
table(bwnet$colors)
# get number of genes for each module
table(bwnet$colors)
traits <- sample_metadata[, c(5,8,11,14,17)]
View(traits)
traits <- sample_metadata[, c(5,8,11,14,17)]
# Define numbers of genes and samples
nSamples <- nrow(norm.counts)
library(corrplot)
# Define numbers of genes and samples
nSamples <- nrow(norm.counts)
nGenes <- ncol(norm.counts)
module.trait.corr <- cor(module_eigengenes, traits, use = 'p')
module.trait.corr.pvals <- corPvalueStudent(module.trait.corr, nSamples)
# Define numbers of genes and samples
nSamples <- nrow(norm.counts)
heatmap.data <- merge(module_eigengenes, traits, by = 'row.names')
head(heatmap.data)
heatmap.data <- heatmap.data %>%
column_to_rownames(var = 'Row.names')
names(heatmap.data)
CorLevelPlot(heatmap.data,
x = names(heatmap.data)[12:16],
y = names(heatmap.data)[1:11],
col = c("blue1", "skyblue", "white", "pink", "red"))
library(tidyselect)
library(tidyverse)
traits <- sample_metadata[, c(5,8,11,14,17)]
View(traits)
# Define numbers of genes and samples
nSamples <- nrow(norm.counts)
nGenes <- ncol(norm.counts)
countsTable <- read.table("salmon.isoform.counts.matrix.filteredAssembly", header=TRUE, row.names=1)
head(countsTable)
dim(countsTable)
countsTableRound <- round(countsTable) # bc DESeq2 doesn't like decimals (and Salmon outputs data with decimals)
head(countsTableRound)
sample_metadata = read.table(file = "Ahud_trait_data.txt",header=T, row.names = 1)
dds <- DESeqDataSetFromMatrix(countData = countsTableRound, colData=sample_metadata,
design= ~ 1)
colData <- row.names(sample_metadata)
# making the rownames and column names identical
all(rownames(colData) %in% colnames(countsTableRound)) # to see if all samples are present in both
all(rownames(colData) == colnames(countsTableRound))  # to see if all samples are in the same order
# perform variance stabilization
dds_norm <- vst(dds)
# get normalized counts
norm.counts <- assay(dds_norm) %>%
t()
traits <- sample_metadata[, c(5,8,11,14,17)]
View(traits)
# Define numbers of genes and samples
nSamples <- nrow(norm.counts)
nGenes <- ncol(norm.counts)
module.trait.corr <- cor(module_eigengenes, traits, use = 'p')
module.trait.corr.pvals <- corPvalueStudent(module.trait.corr, nSamples)
heatmap.data <- merge(module_eigengenes, traits, by = 'row.names')
head(heatmap.data)
heatmap.data <- heatmap.data %>%
column_to_rownames(var = 'Row.names')
names(heatmap.data)
CorLevelPlot(heatmap.data,
x = names(heatmap.data)[12:16],
y = names(heatmap.data)[1:11],
col = c("blue1", "skyblue", "white", "pink", "red"))
module.gene.mapping <- as.data.frame(bwnet$colors) # assigns module membership to each gene
module.gene.mapping %>%
filter(`bwnet$colors` == 'yellow') %>%
rownames()
groups <- sample_metadata[,c(3,1)]
module_eigengene.metadata <- merge(groups, heatmap.data, by = 'row.names')
#Create a summary data frame of a particular module eigengene information
MEyellow_summary <- summarySE(module_eigengene.metadata, measurevar="MEyellow", groupvars=c("Generation","treatment"))
#Plot a line interaction plot of a particular module eigengene
ggplot(MEyellow_summary, aes(x=as.factor(Generation), y=MEyellow, color=treatment, fill = treatment, shape = treatment)) +
geom_point(size=5, stroke = 1.5 ) +
geom_errorbar(aes(ymin=MEyellow-se, ymax=MEyellow+se), width=.15) +
geom_line(aes(color=treatment, group=treatment, linetype = treatment)) +
scale_color_manual(values = c('#6699CC',"#F2AD00","#00A08A", "#CC3333")) +
scale_shape_manual(values=c(21,22,23,24), labels = c("Ambient", "Acidification","Warming", "OWA"))+
scale_fill_manual(values=c('#6699CC',"#F2AD00","#00A08A", "#CC3333"), labels = c("Ambient", "Acidification","Warming", "OWA"))+
xlab("Generation") +
theme_bw() +
theme(legend.position = "none") +
theme(panel.border = element_rect(color = "black", fill = NA, size = 4))+
theme(text = element_text(size = 20)) +
theme(panel.grid.minor.y = element_blank(), legend.position = "none", plot.margin = margin(0,6,0,6))
module.gene.mapping <- as.data.frame(bwnet$colors) # assigns module membership to each gene
module.gene.mapping %>%
filter(`bwnet$colors` == 'yellow') %>%
rownames()
groups <- sample_metadata[,c(3,1)]
module_eigengene.metadata <- merge(groups, heatmap.data, by = 'row.names')
#Create a summary data frame of a particular module eigengene information
MEyellow_summary <- summarySE(module_eigengene.metadata, measurevar="MEyellow", groupvars=c("Generation","treatment"))
# Get top hub genes (genes with highest connectivity in the network)
hubs  <-  chooseTopHubInEachModule(norm.counts, bwnet$colors, type = "signed", omitColors = "")
hubs
d <-plotCounts(dds, gene="TRINITY_DN11845_c0_g1::TRINITY_DN11845_c0_g1_i9::g.36434::m.36434", intgroup = (c("treatment","Generation")), returnData=TRUE)
d_summary <- summarySE(d, measurevar = "count", groupvars=c("Generation","treatment"))
ggplot(d_summary, aes(x=Generation, y=count, color=treatment, fill = treatment, shape = treatment)) +
geom_point(size=5, stroke = 1.5 ) +
geom_errorbar(aes(ymin=count-se, ymax=count+se), width=.15) +
geom_line(aes(color=treatment, group=treatment, linetype = treatment)) +
scale_color_manual(values = c('#6699CC',"#F2AD00","#00A08A", "#CC3333")) +
scale_shape_manual(values=c(21,22,23,24), labels = c("Ambient", "Acidification","Warming", "OWA"))+
scale_fill_manual(values=c('#6699CC',"#F2AD00","#00A08A", "#CC3333"), labels = c("Ambient", "Acidification","Warming", "OWA"))+
xlab("Generation") +
theme_bw() +
theme(legend.position = "none") +
theme(panel.border = element_rect(color = "black", fill = NA, size = 4))+
theme(text = element_text(size = 20)) +
theme(panel.grid.minor.y = element_blank(), legend.position = "none", plot.margin = margin(0,6,0,6))
module.membership.measure <- cor(module_eigengenes, norm.counts, use = 'p')
module.membership.measure.pvals <- corPvalueStudent(module.membership.measure, nSamples)
module.membership.measure.pvals[1:10,1:10]
# Purple module
purple_transcripts <- module.gene.mapping %>%
filter(`bwnet$colors` == 'purple') %>%
rownames()
t_norm.counts_purple <- t_norm.counts %>%
filter(row.names(t_norm.counts) %in% purple_transcripts)
t_norm.counts_purple <- t_norm.counts_purple - rowMeans(t_norm.counts_purple)
df <- as.data.frame(colData(dds)[,c("eneration","treatment")])
# Make a heat map of gene expressions within modules.
# Use the norm.counts matrix, subset based on module membership
t_norm.counts <- norm.counts %>% t() %>% as.data.frame()
# Purple module
purple_transcripts <- module.gene.mapping %>%
filter(`bwnet$colors` == 'purple') %>%
rownames()
t_norm.counts_purple <- t_norm.counts %>%
filter(row.names(t_norm.counts) %in% purple_transcripts)
t_norm.counts_purple <- t_norm.counts_purple - rowMeans(t_norm.counts_purple)
df <- as.data.frame(colData(dds)[,c("eneration","treatment")])
#blue to yellow color scheme
paletteLength <- 50
# Purple module
purple_transcripts <- module.gene.mapping %>%
filter(`bwnet$colors` == 'purple') %>%
rownames()
t_norm.counts_purple <- t_norm.counts %>%
filter(row.names(t_norm.counts) %in% purple_transcripts)
t_norm.counts_purple <- t_norm.counts_purple - rowMeans(t_norm.counts_purple)
df <- as.data.frame(colData(dds)[,c("Generation","treatment")])
#blue to yellow color scheme
paletteLength <- 50
myColor <- colorRampPalette(c("dodgerblue", "black", "yellow"))(paletteLength)
myBreaks <- c(seq(min(t_norm.counts_yellow), 0, length.out=ceiling(paletteLength/2) + 1),
seq(max(t_norm.counts_purple)/paletteLength, max(t_norm.counts_purple), length.out=floor(paletteLength/2)))
#blue to yellow color scheme
paletteLength <- 50
myColor <- colorRampPalette(c("dodgerblue", "black", "yellow"))(paletteLength)
myBreaks <- c(seq(min(t_norm.counts_purple), 0, length.out=ceiling(paletteLength/2) + 1),
seq(max(t_norm.counts_purple)/paletteLength, max(t_norm.counts_purple), length.out=floor(paletteLength/2)))
pheatmap(t_norm.counts_purple, color = myColor, breaks = myBreaks,
show_colnames = FALSE, show_rownames = FALSE, annotation_col = df, main = "Purple")
library(pheatmap)
#blue to yellow color scheme
paletteLength <- 50
myColor <- colorRampPalette(c("dodgerblue", "black", "yellow"))(paletteLength)
myBreaks <- c(seq(min(t_norm.counts_purple), 0, length.out=ceiling(paletteLength/2) + 1),
seq(max(t_norm.counts_purple)/paletteLength, max(t_norm.counts_purple), length.out=floor(paletteLength/2)))
pheatmap(t_norm.counts_purple, color = myColor, breaks = myBreaks,
show_colnames = FALSE, show_rownames = FALSE, annotation_col = df, main = "Purple")
# Make a heat map of gene expressions within modules.
# Use the norm.counts matrix, subset based on module membership
t_norm.counts <- norm.counts %>% t() %>% as.data.frame()
# Purple module
purple_transcripts <- module.gene.mapping %>%
filter(`bwnet$colors` == 'purple') %>%
rownames()
t_norm.counts_purple <- t_norm.counts %>%
filter(row.names(t_norm.counts) %in% purple_transcripts)
t_norm.counts_purple <- t_norm.counts_purple - rowMeans(t_norm.counts_purple)
df <- as.data.frame(colData(dds)[,c("Generation","treatment")])
#blue to yellow color scheme
paletteLength <- 50
myColor <- colorRampPalette(c("dodgerblue", "white", "yellow"))(paletteLength)
myBreaks <- c(seq(min(t_norm.counts_purple), 0, length.out=ceiling(paletteLength/2) + 1),
seq(max(t_norm.counts_purple)/paletteLength, max(t_norm.counts_purple), length.out=floor(paletteLength/2)))
pheatmap(t_norm.counts_purple, color = myColor, breaks = myBreaks,
show_colnames = FALSE, show_rownames = FALSE, annotation_col = df, main = "Purple")
