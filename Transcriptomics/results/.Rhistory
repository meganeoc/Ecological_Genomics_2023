hello
3+7
4^3-5
airTemp<-c(34,35,42,48,39)
print(airTemp)
summary(airTemp)
batAbundance<-c(100,104,98,132,138,150)
summary(batAbundance)
plot(x=airTemp, y=batAbundance)
plot(x=airTemp, y=batAbundance)
airTemp<-c(32,34,35,37,39,40)
plot(x=airTemp, y=batAbundance)
plot(x=airTemp, y=batAbundance,type="o")
ANOVADiameter <- aov(GoldenrodRawData$Diameter ~ GoldenrodRawData$SpeciesID)
# the par() function customizes many features of your graphs
# make a copy of current graphical parameter values
opar <- par()
#file.choose()
GoldenrodRawData <- read.csv(file = "Goldenrod_RawData.csv")
SC <- subset(GoldenrodRawData, SpeciesID == "SC")
SR <- subset(GoldenrodRawData, SpeciesID == "SR")
# the par() function customizes many features of your graphs
# make a copy of current graphical parameter values
opar <- par()
#file.choose()
GoldenrodRawData <- read.csv(file = "Goldenrod_RawData.csv")
#file.choose()
GoldenrodRawData <- read.csv(file = "Goldenrod_RawData.csv")
#file.choose()
GoldenrodRawData <- read.csv(file = "Goldenrod_RawData.csv")
SC <- subset(GoldenrodRawData, SpeciesID == "SC")
SR <- subset(GoldenrodRawData, SpeciesID == "SR")
# the par() function customizes many features of your graphs
# make a copy of current graphical parameter values
opar <- par()
#file.choose()
GoldenrodRawData <- read.csv(file = "Goldenrod_RawData.csv")
SC <- subset(GoldenrodRawData, SpeciesID == "SC")
SR <- subset(GoldenrodRawData, SpeciesID == "SR")
SG <- subset(GoldenrodRawData, SpeciesID == "SG")
## Summary statistic values
summary(SC)
summary(SR)
library(readr)
Goldenrod_RawData <- read_csv("Downloads/Goldenrod_RawData.csv")
View(Goldenrod_RawData)
# the par() function customizes many features of your graphs
# make a copy of current graphical parameter values
opar <- par()
#file.choose()
GoldenrodRawData <- read.csv(file = "Goldenrod_RawData.csv")
SC <- subset(GoldenrodRawData, SpeciesID == "SC")
SR <- subset(GoldenrodRawData, SpeciesID == "SR")
#file.choose()
GoldenrodRawData <- read.csv(file = "Goldenrod_RawData.csv")
View(Goldenrod_RawData)
# the par() function customizes many features of your graphs
# make a copy of current graphical parameter values
opar <- par()
#file.choose()
GoldenrodRawData <- read.csv(file = "Goldenrod_RawData.csv")
SC <- subset(GoldenrodRawData, SpeciesID == "SC")
SR <- subset(GoldenrodRawData, SpeciesID == "SR")
SG <- subset(GoldenrodRawData, SpeciesID == "SG")
# the par() function customizes many features of your graphs
# make a copy of current graphical parameter values
opar <- par()
#file.choose()
GoldenrodRawData <- read.csv(file = "Goldenrod_RawData.csv")
SC <- subset(GoldenrodRawData, SpeciesID == "SC")
par(mfrow=c(3,1))
plot(SC$Diameter ~SC$Height)
#CoefSC <- cor(SC$Diameter, SC$Height)
#don't worry about lm now, it is to draw a line on the graph
regressionSC = lm(SC$Diameter ~SC$Height)
abline(regressionSC, col = "green")
legend("topleft", bty="n", legend= "r =LOOK AT CoefSC in console")
#SR
plot(SR$Diameter ~ SR$Height)
regressionSR = lm(SR$Diameter ~SR$Height)
# the par() function customizes many features of your graphs
# make a copy of current graphical parameter values
opar <- par()
#file.choose()
GoldenrodRawData <- read.csv(file = "Goldenrod_RawData.csv")
SC <- subset(GoldenrodRawData, SpeciesID == "SC")
SR <- subset(GoldenrodRawData, SpeciesID == "SR")
SG <- subset(GoldenrodRawData, SpeciesID == "SG")
## Summary statistic values
summary(SC)
# the par() function customizes many features of your graphs
# make a copy of current graphical parameter values
opar <- par()
#file.choose()
GoldenrodRawData <- read.csv(file = "Goldenrod_RawData.csv")
# Load the package
library(WGCNA);
# The following setting is important, do not omit.
options(stringsAsFactors = FALSE);
library(DESeq2)
library(ggplot2)
library(tidyverse)
install.packages("remotes")
install.packages("remotes")
remotes::install_github("kevinblighe/CorLevelPlot")
library(CorLevelPlot)
library(gridExtra)
library(Rmisc)
countsTable <- read.table("salmon.isoform.counts.matrix.filteredAssembly", header=TRUE, row.names=1)
head(countsTable)
setwd("~/Desktop/Ecological_Genomics_2023/Transcriptomics/results")
# Load the package
library(WGCNA);
library(ggplot2)
library(WGCNA)
install.packages("preprocessCore")
# Load the package
library(WGCNA);
library(CorLevelPlot)
library(gridExtra)
library(Rmisc)
countsTable <- read.table("salmon.isoform.counts.matrix.filteredAssembly", header=TRUE, row.names=1)
head(countsTable)
dim(countsTable)
countsTableRound <- round(countsTable) # bc DESeq2 doesn't like decimals (and Salmon outputs data with decimals)
head(countsTableRound)
sample_metadata = read.table(file = "Ahud_trait_data.txt",header=T, row.names = 1)
dds <- DESeqDataSetFromMatrix(countData = countsTableRound, colData=sample_metadata,
design= ~ 1)
dim(dds)
dds <- dds[rowSums(counts(dds) >= 15) >= 28,]
nrow(dds)
## Set your working directory
setwd("~/Desktop/Ecological_Genomics_2023/Transcriptomics/results")
library(DESeq2)
library(dplyr)
library(tidyr)
library(ggplot2)
library(scales)
library(ggpubr)
library(wesanderson)
library(vsn)
# Import the counts matrix
countsTable <- read.table("Ahud_trait_data.txt", header=TRUE, row.names=1)
head(countsTable)
dim(countsTable)
countsTableRound <- round(countsTable) # bc DESeq2 doesn't like decimals (and Salmon outputs data with decimals)
head(countsTableRound)
#import the sample discription table
conds <- read.delim("ahud_samples_R.txt", header=TRUE, stringsAsFactors = TRUE, row.names=1)
head(conds)
##################################################
# Let's see how many reads we have from each sample
colSums(countsTableRound)
mean(colSums(countsTableRound))
barplot(colSums(countsTableRound), names.arg=colnames(countsTableRound),cex.names=0.5, las=3,ylim=c(0,20000000))
abline(h=mean(colSums(countsTableRound)), col="blue", lwd=2)
dim(countsTable)
countsTableRound <- round(countsTable) # bc DESeq2 doesn't like decimals (and Salmon outputs data with decimals)
head(countsTableRound)
#import the sample discription table
conds <- read.delim("ahud_samples_R.txt", header=TRUE, stringsAsFactors = TRUE, row.names=1)
head(conds)
##################################################
# Let's see how many reads we have from each sample
colSums(countsTableRound)
mean(colSums(countsTableRound))
barplot(colSums(countsTableRound), names.arg=colnames(countsTableRound),cex.names=0.5, las=3,ylim=c(0,20000000))
abline(h=mean(colSums(countsTableRound)), col="blue", lwd=2)
# the average number of counts per gene
rowSums(countsTableRound)
mean(rowSums(countsTableRound)) # [1] 6076.078 - hudsonica genes, 2269 - hudsonica isoform, 8218 - hudsonica filtered
median(rowSums(countsTableRound)) # [1] 582 - hudsonica, 109 - hudsonica isoforms, 377 - hudsonica filtered
apply(countsTableRound,2,mean) # 2 in the apply function does the action across columns
apply(countsTableRound,1,mean) # 1 in the apply function does the action across rows
hist(apply(countsTableRound,1,mean),xlim=c(0,1000), ylim=c(0,50000),breaks=10000)
dds <- DESeqDataSetFromMatrix(countData = countsTableRound, colData=conds,
design= ~ generation + treatment)
dim(dds)
dds <- dds[rowSums(counts(dds) >= 15) >= 28,]
nrow(dds)
# Run the DESeq model to test for differential gene expression
dds <- DESeq(dds)
# List the results you've generated
resultsNames
library("pheatmap")
library("vsn")
colors <- colorRampPalette( rev(brewer.pal(9, "Blues")) )(255)
pheatmap(sampleDistMatrix,
clustering_distance_rows=sampleDists,
clustering_distance_cols=sampleDists,
col=colors)
# first transform the data for plotting using variance stabilization
vsd <- vst(dds, blind=FALSE)
pcaData <- plotPCA(vsd, intgroup=c("treatment","generation"), returnData=TRUE)
percentVar <- round(100 * attr(pcaData,"percentVar"))
ggplot(pcaData, aes(PC1, PC2, color=treatment, shape=generation)) +
geom_point(size=3) +
xlab(paste0("PC1: ",percentVar[1],"% variance")) +
ylab(paste0("PC2: ",percentVar[2],"% variance")) +
coord_fixed()
data <- plotPCA(vsd, intgroup=c("treatment","generation"), returnData=TRUE)
percentVar <- round(100 * attr(data,"percentVar"))
dataF0 <- subset(data, generation == 'F0')
F0 <- ggplot(dataF0, aes(PC1, PC2)) +
geom_point(size=10, stroke = 1.5, aes(fill=treatment, shape=treatment)) +
xlab(paste0("PC1: ",percentVar[1],"% variance")) +
ylab(paste0("PC2: ",percentVar[2],"% variance")) +
ylim(-10, 25) + xlim(-40, 10)+ # zoom for F0 with new assembly
#ylim(-40, 25) + xlim(-50, 50)+ # new assembly limits
#ylim(-40, 20) + xlim(-50, 30)+
scale_shape_manual(values=c(21,22,23,24), labels = c("Ambient", "Acidification","Warming", "OWA"))+
scale_fill_manual(values=c('#6699CC',"#F2AD00","#00A08A", "#CC3333"), labels = c("Ambient", "Acidification","Warming", "OWA"))+
##theme(legend.position = c(0.83,0.85), legend.background = element_blank(), legend.box.background = element_rect(colour = "black")) +
#guides(shape = guide_legend(override.aes = list(shape = c( 21,22, 23, 24))))+
#guides(fill = guide_legend(override.aes = list(shape = c( 21,22, 23, 24))))+
#guides(shape = guide_legend(override.aes = list(size = 5)))+
theme_bw() +
theme(legend.position = "none") +
theme(panel.border = element_rect(color = "black", fill = NA, size = 4))+
theme(text = element_text(size = 20)) +
theme(legend.title = element_blank())
F0
dataF2 <- subset(data, generation == 'F2')
F2 <- ggplot(dataF2, aes(PC1, PC2)) +
geom_point(size=10, stroke = 1.5, aes(fill=treatment, shape=treatment)) +
xlab(paste0("PC1: ",percentVar[1],"% variance")) +
ylab(paste0("PC2: ",percentVar[2],"% variance")) +
ylim(-40, 25) + xlim(-50, 55)+
#ylim(-40, 20) + xlim(-50, 30)+
scale_shape_manual(values=c(21,22,23), labels = c("Ambient", "Acidification","Warming"))+
# scale_color_manual(values = c('#6699CC',"#F2AD00","#00A08A", "#CC3333")) +
#scale_color_manual(values=c('black')) +
scale_fill_manual(values=c('#6699CC',"#F2AD00","#00A08A"), labels = c("Ambient", "Acidification","Warming"))+
theme(legend.position = c(0.83,0.85), legend.background = element_blank(), legend.box.background = element_rect(colour = "black")) +
#scale_size(guide="none") +
guides(shape = guide_legend(override.aes = list(shape = c( 21,22, 23))))+
guides(fill = guide_legend(override.aes = list(shape = c( 21,22, 23))))+
guides(shape = guide_legend(override.aes = list(size = 5)))+
theme_bw() +
theme(legend.position = "none") +
theme(panel.border = element_rect(color = "black", fill = NA, size = 4))+
theme(text = element_text(size = 20)) +
theme(legend.title = element_blank())
F2
dataF4 <- subset(data, generation == 'F4')
F4 <- ggplot(dataF4, aes(PC1, PC2)) +
geom_point(size=10, stroke = 1.5, aes(fill=treatment, shape=treatment)) +
xlab(paste0("PC1: ",percentVar[1],"% variance")) +
ylab(paste0("PC2: ",percentVar[2],"% variance")) +
ylim(-40, 25) + xlim(-50, 55)+ # limits with filtered assembly
#ylim(-20, 10) + xlim(-40, 25)+  # zoom with filtered assembly
#ylim(-40, 20) + xlim(-50, 30)+
scale_shape_manual(values=c(21,22,23,24), labels = c("Ambient", "Acidification","Warming", "OWA"))+
# scale_color_manual(values = c('#6699CC',"#F2AD00","#00A08A", "#CC3333")) +
#scale_color_manual(values=c('black')) +
scale_fill_manual(values=c('#6699CC',"#F2AD00","#00A08A", "#CC3333"), labels = c("Ambient", "Acidification","Warming", "OWA"))+
#theme(legend.position = c(0.83,0.85), legend.background = element_blank(), legend.box.background = element_rect(colour = "black")) +
#scale_size(guide="none") +
guides(shape = guide_legend(override.aes = list(shape = c( 21,22, 23, 24))))+
guides(fill = guide_legend(override.aes = list(shape = c( 21,22, 23, 24))))+
guides(shape = guide_legend(override.aes = list(size = 5)))+
theme_bw() +
theme(legend.position = "none") +
theme(panel.border = element_rect(color = "black", fill = NA, size = 4))+
theme(text = element_text(size = 20)) +
theme(legend.title = element_blank())
F4
dataF11 <- subset(data, generation == 'F11')
F11 <- ggplot(dataF11, aes(PC1, PC2)) +
geom_point(size=10, stroke = 1.5, aes(fill=treatment, shape=treatment)) +
xlab(paste0("PC1: ",percentVar[1],"% variance")) +
ylab(paste0("PC2: ",percentVar[2],"% variance")) +
ylim(-40, 25) + xlim(-50, 55)+
#ylim(-40, 20) + xlim(-50, 30)+
scale_shape_manual(values=c(21,24), labels = c("Ambient", "OWA"))+
scale_fill_manual(values=c('#6699CC', "#CC3333"), labels = c("Ambient", "OWA"))+
guides(shape = guide_legend(override.aes = list(shape = c( 21, 24))))+
guides(fill = guide_legend(override.aes = list(shape = c( 21, 24))))+
guides(shape = guide_legend(override.aes = list(size = 5)))+
theme_bw() +
theme(legend.position = "none") +
theme(panel.border = element_rect(color = "black", fill = NA, size = 4))+
theme(text = element_text(size = 20)) +
theme(legend.title = element_blank())
F11
ggarrange(F0, F2, F4, F11, nrow = 2, ncol=2)
resAM_OWA <- results(dds, name="treatment_OWA_vs_AM", alpha=0.05)
resAM_OWA <- resAM_OWA[order(resAM_OWA$padj),]
head(resAM_OWA)
summary(resAM_OWA)
resAM_OW <- results(dds, name="treatment_OW_vs_AM", alpha=0.05)
resAM_OW <- resAM_OW[order(resAM_OW$padj),]
head(resAM_OW)
summary(resAM_OW)
# Counts of specific top interaction gene! (important validatition that the normalization, model is working)
d <-plotCounts(dds, gene="TRINITY_DN3600_c0_g1::TRINITY_DN3600_c0_g1_i2::g.16079::m.16079", intgroup = (c("treatment","generation")), returnData=TRUE)
d
p <-ggplot(d, aes(x=treatment, y=count, color=treatment, shape=generation)) +
theme_minimal() + theme(text = element_text(size=20), panel.grid.major=element_line(colour="grey"))
p <- p + geom_point(position=position_jitter(w=0.2,h=0), size=3)
p <- p + stat_summary(fun = mean, geom = "line")
p <- p + stat_summary(fun = mean, geom = "point", size=5, alpha=0.7)
p
dds <- DESeqDataSetFromMatrix(countData = countsTableRound, colData=conds,
design= ~ treatment)
dim(dds)
# Filter
dds <- dds[rowSums(counts(dds) >= 30) >= 28,]
nrow(dds)
# Subset the DESeqDataSet to the specific level of the "generation" factor
dds_sub <- subset(dds, select = generation == 'F0')
dim(dds_sub)
# Perform DESeq2 analysis on the subset
dds_sub <- DESeq(dds_sub)
resultsNames(dds_sub)
res_F0_OWvAM <- results(dds_sub, name="treatment_OW_vs_AM", alpha=0.05)
res_F0_OWvAM <- res_F0_OWvAM[order(res_F0_OWvAM$padj),]
head(res_F0_OWvAM)
summary(res_F0_OWvAM)
# Counts of specific top interaction gene! (important validatition that the normalization, model is working)
d <-plotCounts(dds_sub, gene="TRINITY_DN30_c0_g2::TRINITY_DN30_c0_g2_i1::g.130::m.130", intgroup = (c("treatment","generation")), returnData=TRUE)
d
p <-ggplot(d, aes(x=treatment, y=count, color=treatment, shape=generation)) +
theme_minimal() + theme(text = element_text(size=20), panel.grid.major=element_line(colour="grey"))
p <- p + geom_point(position=position_jitter(w=0.2,h=0), size=3)
p <- p + stat_summary(fun = mean, geom = "point", size=5, alpha=0.7)
p
# ALSO We can make an MA plot
plotMA(res_F0_OWvAM, ylim=c(-4,4))
library(pheatmap)
# By environment
vsd <- vst(dds_sub, blind=FALSE)
topgenes <- head(rownames(res_F0_OWvAM),20)
mat <- assay(vsd)[topgenes,]
mat <- mat - rowMeans(mat)
df <- as.data.frame(colData(dds_sub)[,c("generation","treatment")])
pheatmap(mat, annotation_col=df)
pheatmap(mat, annotation_col=df, cluster_cols = F)
# For OW vs AM
res_F0_OWvAM <- results(dds_sub, name="treatment_OW_vs_AM", alpha=0.05)
res_F0_OWvAM <- res_F0_OWvAM[order(res_F0_OWvAM$padj),]
head(res_F0_OWvAM)
summary(res_F0_OWvAM)
res_F0_OWvAM <- res_F0_OWvAM[!is.na(res_F0_OWvAM$padj),]
degs_F0_OWvAM <- row.names(res_F0_OWvAM[res_F0_OWvAM$padj < 0.05,])
# For OA vs AM
res_F0_OAvAM <- results(dds_sub, name="treatment_OA_vs_AM", alpha=0.05)
res_F0_OAvAM <- res_F0_OAvAM[order(res_F0_OAvAM$padj),]
head(res_F0_OAvAM)
summary(res_F0_OAvAM)
res_F0_OAvAM <- res_F0_OAvAM[!is.na(res_F0_OAvAM$padj),]
degs_F0_OAvAM <- row.names(res_F0_OAvAM[res_F0_OAvAM$padj < 0.05,])
# For OWA vs AM
res_F0_OWAvAM <- results(dds_sub, name="treatment_OWA_vs_AM", alpha=0.05)
res_F0_OWAvAM <- res_F0_OWAvAM[order(res_F0_OWAvAM$padj),]
head(res_F0_OWAvAM)
summary(res_F0_OWAvAM)
res_F0_OWAvAM <- res_F0_OWAvAM[!is.na(res_F0_OWAvAM$padj),]
degs_F0_OWAvAM <- row.names(res_F0_OWAvAM[res_F0_OWAvAM$padj < 0.05,])
library(eulerr)
# Total
length(degs_F0_OAvAM)  # 602
length(degs_F0_OWvAM)  # 5517
length(degs_F0_OWAvAM)  # 3918
# Intersections
length(intersect(degs_F0_OAvAM,degs_F0_OWvAM))  # 387, 444
length(intersect(degs_F0_OAvAM,degs_F0_OWAvAM))  # 340, 380
length(intersect(degs_F0_OWAvAM,degs_F0_OWvAM))  # 2585, 2743
intWA <- intersect(degs_F0_OAvAM,degs_F0_OWvAM)
length(intersect(degs_F0_OWAvAM,intWA)) # 308, 338
602-444-380+338 # 101 OA
4841-387-2585+308 # 2177 OW
3742-340-2585+308 # 1125 OWA
387-308 # 79 OA & OW
340-308 # 32 OA & OWA
2585-308 # 2277 OWA & OW
# Note that the names are important and have to be specific to line up the diagram
fit1 <- euler(c("OA" = 101, "OW" = 2177, "OWA" = 1125, "OA&OW" = 79, "OA&OWA" = 32, "OW&OWA" = 2277, "OA&OW&OWA" = 308))
plot(fit1,  lty = 1:3, quantities = TRUE)
plot(fit1, quantities = TRUE, fill = "transparent",
lty = 1:3,
labels = list(font = 4))
#cross check
2177+2277+308+79 # 4841, total OW
1125+2277+308+32 # 3742, total OWA
101+32+79+308    # 520, total OA
countsTable <- read.table("salmon.isoform.counts.matrix.filteredAssembly", header=TRUE, row.names=1)
head(countsTable)
dim(countsTable)
countsTableRound <- round(countsTable) # bc DESeq2 doesn't like decimals (and Salmon outputs data with decimals)
head(countsTableRound)
sample_metadata = read.table(file = "Ahud_trait_data.txt",header=T, row.names = 1)
dds <- DESeqDataSetFromMatrix(countData = countsTableRound, colData=sample_metadata,
design= ~ 1)
dim(dds)
dds <- dds[rowSums(counts(dds) >= 15) >= 28,]
nrow(dds)
# Run the DESeq model to test for differential gene expression
dds <- DESeq(dds)
gsg <- goodSamplesGenes(t(countsTable))
summary(gsg)
gsg$allOK
table(gsg$goodGenes)
table(gsg$goodSamples)
# detect outlier samples - hierarchical clustering - method 1
htree <- hclust(dist(t(countsTable)), method = "average")
gsg <- goodSamplesGenes(t(countsTable))
summary(gsg)
gsg$allOK
table(gsg$goodGenes)
table(gsg$goodSamples)
# detect outlier samples - hierarchical clustering - method 1
htree <- hclust(dist(t(countsTable)), method = "average")
plot(htree)
pca <- prcomp(t(countsTable))
pca.dat <- pca$x
pca.var <- pca$sdev^2
pca.var.percent <- round(pca.var/sum(pca.var)*100, digits = 2)
pca.dat <- as.data.frame(pca.dat)
ggplot(pca.dat, aes(PC1, PC2)) +
geom_point() +
geom_text(label = rownames(pca.dat)) +
labs(x = paste0('PC1: ', pca.var.percent[1], ' %'),
y = paste0('PC2: ', pca.var.percent[2], ' %'))
colData <- row.names(sample_metadata)
# making the rownames and column names identical
all(rownames(colData) %in% colnames(countsTableRound)) # to see if all samples are present in both
all(rownames(colData) == colnames(countsTableRound))  # to see if all samples are in the same order
# perform variance stabilization
dds_norm <- vst(dds)
# get normalized counts
norm.counts <- assay(dds_norm) %>%
t()
##############################################################################
# CHECK QUALITY OF DATA BY SAMPLE CLUSTERING AND VISUALIZATION
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("impute", force = TRUE)
